inc "fmath.slh"

class float
  oper proc round 1 1
    asm "fld qword[rsp]"
    asm "frndint"
    asm "fstp qword[rsp]"

    ret
  end

  oper proc abs 1 1
    asm "fld qword[rsp]"
    asm "fabs"
    asm "fstp qword[rsp]"

    ret
  end

  oper proc toint 1 1
    asm "fld qword[rsp]"
    asm "fistp qword[rsp]"

    ret
  end

  oper proc add 2 1
    var rax 8
    var rbx 8
    
    rbx swap put disc
    rax swap put disc

    rbx rax
    asm "pop rax"
    asm "pop rbx"
    asm "sub rsp, 16" disc
    asm "fld qword[rax]"
    asm "fld qword[rbx]"
    asm "faddp"
    asm "fstp qword[rsp]"

    ret
  end

  oper proc sub 2 1
    var rax 8
    var rbx 8
    
    rbx swap put disc
    rax swap put disc

    rbx rax
    asm "pop rax"
    asm "pop rbx"
    asm "sub rsp, 16" disc
    asm "fld qword[rax]"
    asm "fld qword[rbx]"
    asm "fsubp"
    asm "fstp qword[rsp]"

    ret
  end

  oper proc div 2 1
    var rax 8
    var rbx 8
    
    rbx swap put disc
    rax swap put disc

    rbx rax
    asm "pop rax"
    asm "pop rbx"
    asm "sub rsp, 16" disc
    asm "fld qword[rax]"
    asm "fld qword[rbx]"
    asm "fdivp"
    asm "fstp qword[rsp]"

    ret
  end

  oper proc mul 2 1
    var rax 8
    var rbx 8
    
    rbx swap put disc
    rax swap put disc

    rbx rax
    asm "pop rax"
    asm "pop rbx"
    asm "sub rsp, 16" disc
    asm "fld qword[rax]"
    asm "fld qword[rbx]"
    asm "fmulp"
    asm "fstp qword[rsp]"

    ret
  end

  oper proc isneg 1 1
    var val 8

    val swap put
    asm "pop rax"
    asm "fld qword[rax]"
    asm "fldz"
    asm "fcompp"
    asm "fstsw ax"
    asm "fwait"
    asm "sahf"
    asm "mov rcx, 0"
    asm "mov rdx, 1"
    asm "cmova rcx, rdx"
    asm "push rcx"

    ret
  end

  oper proc print 1 0
    var val 8
    var char 8

    val swap put disc

    val read float.isneg
    ! if 
      "-" cstr.print
    end
    val copy read float.abs put disc
    val read float.toint
    copy 0 == if "0" cstr.print end
    copy 0 != if copy int.cstr cstr.print end
    disc
    val read
    val read float.round swap
    float.sub
    val swap put disc

    "." cstr.print

    0
    do
      val read 
      10 int.float float.mul
      copy float.toint 
      copy 0 > ! if -1 * end
      '0' +
      char 0 put disc
      char swap putc disc
      char cstr.print

      copy float.round swap
      float.sub
      val swap put disc

      1 +
      copy 5 <
    end
    disc

    cstr.cr

    ret
  end
end
